// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderApplicationServer.Web.Data;

#nullable disable

namespace OrderApplicationServer.Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211221075559_initial fix")]
    partial class initialfix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "rrrrrrrr-22b1-4479-j58g-rrrrrrrr",
                            ConcurrencyStamp = "6310e53a-a361-4bd5-bde6-f754c8914212",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "rrrrrrrr-l0w6-hhhh-jf84-rrrrrrrr",
                            ConcurrencyStamp = "a4ee91d3-803e-422c-8f2f-a0bf456a70ff",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "435dbe81-22b1-4479-bea2-d730a7750aa1",
                            RoleId = "rrrrrrrr-22b1-4479-j58g-rrrrrrrr"
                        },
                        new
                        {
                            UserId = "z65dbe81-22b1-4479-j58g-d730ap050aa1",
                            RoleId = "rrrrrrrr-l0w6-hhhh-jf84-rrrrrrrr"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderApplicationServer.Web.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "435dbe81-22b1-4479-bea2-d730a7750aa1",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c14f0af2-1f7b-4aee-9ef3-5d99f1fdf7d7",
                            Created = new DateTime(2021, 12, 21, 8, 55, 59, 240, DateTimeKind.Local).AddTicks(3043),
                            Email = "ddevito@gmail.com",
                            EmailConfirmed = true,
                            FName = "Danny",
                            LName = "Devito",
                            LockoutEnabled = false,
                            NormalizedEmail = "DDEVITO@GMAIL.COM",
                            NormalizedUserName = "DDEVITO",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ4sp6NMhb5cvWJ3Ib51GUMZl8Ax8Ox6vN6jn/KB0MwtvC5juBMJloJK3KNDNVWUCA==",
                            PhoneNumber = "+1111111111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "30cf95a9-e470-450f-9265-ba5569b66a98",
                            TwoFactorEnabled = false,
                            UserName = "ddevito"
                        },
                        new
                        {
                            Id = "z65dbe81-22b1-4479-j58g-d730ap050aa1",
                            AccessFailedCount = 0,
                            Birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "7bb6f4cc-8946-4082-a271-02f9bab27f98",
                            Created = new DateTime(2021, 12, 21, 8, 55, 59, 240, DateTimeKind.Local).AddTicks(3092),
                            Email = "bbrot@gmail.com",
                            EmailConfirmed = true,
                            FName = "Bernd",
                            LName = "Brot",
                            LockoutEnabled = false,
                            NormalizedEmail = "BBROT@GMAIL.COM",
                            NormalizedUserName = "BBROT",
                            PasswordHash = "AQAAAAEAACcQAAAAEH57Qfe2VuCBGGGTcpsPkykq3aCAYWFVeeJPIMScswgyeHFXxFT+OVLXtmBoxx0JQg==",
                            PhoneNumber = "+222222222",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "70f9975a-7c45-44ca-8606-60ee0bae71b4",
                            TwoFactorEnabled = false,
                            UserName = "bbrot"
                        });
                });

            modelBuilder.Entity("OrderApplicationServer.Web.Data.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", "ord");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            OrderDate = new DateTime(2021, 12, 21, 8, 55, 59, 255, DateTimeKind.Local).AddTicks(3592),
                            UserId = "z65dbe81-22b1-4479-j58g-d730ap050aa1"
                        },
                        new
                        {
                            OrderId = 2,
                            OrderDate = new DateTime(2021, 12, 21, 8, 55, 59, 255, DateTimeKind.Local).AddTicks(3628),
                            UserId = "435dbe81-22b1-4479-bea2-d730a7750aa1"
                        },
                        new
                        {
                            OrderId = 3,
                            OrderDate = new DateTime(2021, 12, 21, 8, 55, 59, 255, DateTimeKind.Local).AddTicks(3630),
                            UserId = "z65dbe81-22b1-4479-j58g-d730ap050aa1"
                        },
                        new
                        {
                            OrderId = 4,
                            OrderDate = new DateTime(2021, 12, 21, 8, 55, 59, 255, DateTimeKind.Local).AddTicks(3631),
                            UserId = "z65dbe81-22b1-4479-j58g-d730ap050aa1"
                        },
                        new
                        {
                            OrderId = 5,
                            OrderDate = new DateTime(2021, 12, 21, 8, 55, 59, 255, DateTimeKind.Local).AddTicks(3633),
                            UserId = "435dbe81-22b1-4479-bea2-d730a7750aa1"
                        },
                        new
                        {
                            OrderId = 6,
                            OrderDate = new DateTime(2021, 12, 21, 8, 55, 59, 255, DateTimeKind.Local).AddTicks(3635),
                            UserId = "435dbe81-22b1-4479-bea2-d730a7750aa1"
                        });
                });

            modelBuilder.Entity("OrderApplicationServer.Web.Data.Models.OrderPosition", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderPositionId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "OrderPositionId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderPositions", "ord");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            OrderPositionId = 1,
                            Amount = 10,
                            Price = 12m,
                            ProductId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            OrderPositionId = 2,
                            Amount = 10,
                            Price = 12m,
                            ProductId = 2
                        },
                        new
                        {
                            OrderId = 1,
                            OrderPositionId = 3,
                            Amount = 10,
                            Price = 12m,
                            ProductId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            OrderPositionId = 4,
                            Amount = 10,
                            Price = 12m,
                            ProductId = 2
                        },
                        new
                        {
                            OrderId = 1,
                            OrderPositionId = 5,
                            Amount = 10,
                            Price = 12m,
                            ProductId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            OrderPositionId = 6,
                            Amount = 10,
                            Price = 12m,
                            ProductId = 2
                        },
                        new
                        {
                            OrderId = 1,
                            OrderPositionId = 7,
                            Amount = 10,
                            Price = 12m,
                            ProductId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            OrderPositionId = 8,
                            Amount = 10,
                            Price = 12m,
                            ProductId = 2
                        },
                        new
                        {
                            OrderId = 1,
                            OrderPositionId = 9,
                            Amount = 10,
                            Price = 12m,
                            ProductId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            OrderPositionId = 10,
                            Amount = 10,
                            Price = 12m,
                            ProductId = 2
                        },
                        new
                        {
                            OrderId = 1,
                            OrderPositionId = 11,
                            Amount = 10,
                            Price = 12m,
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("OrderApplicationServer.Web.Data.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products", "prod");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ImgPath = "/Images/img1.jpg",
                            Price = 69.99m,
                            Title = "Very Far Away Horse for GAMECUBE"
                        },
                        new
                        {
                            ProductId = 2,
                            ImgPath = "/Images/img2.jpg",
                            Price = 9.99m,
                            Title = "Funeral Kazoo"
                        },
                        new
                        {
                            ProductId = 3,
                            ImgPath = "/Images/img3.jpg",
                            Price = 14.99m,
                            Title = "Muppet Screams"
                        },
                        new
                        {
                            ProductId = 4,
                            ImgPath = "/Images/img4.jpg",
                            Price = 2.50m,
                            Title = "Pre-Cracked Egg"
                        },
                        new
                        {
                            ProductId = 5,
                            ImgPath = "/Images/img5.jpg",
                            Price = 12m,
                            Title = "Shaq O'Neal's Pregnancy Test"
                        },
                        new
                        {
                            ProductId = 6,
                            ImgPath = "/Images/img6.jpg",
                            Price = 4.99m,
                            Title = "Defenetry-Not SNOOPY"
                        },
                        new
                        {
                            ProductId = 7,
                            ImgPath = "/Images/img7.jpg",
                            Price = 4.99m,
                            Title = "Weird Dogs"
                        });
                });

            modelBuilder.Entity("OrderApplicationServer.Web.Data.Models.ProductProperty", b =>
                {
                    b.Property<int>("ProductPropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductPropertyId"), 1L, 1);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ProductPropertyId");

                    b.ToTable("ProductProperties", "prod");

                    b.HasData(
                        new
                        {
                            ProductPropertyId = 1,
                            Notes = "Food, Snacks including Drinks",
                            Title = "Food"
                        },
                        new
                        {
                            ProductPropertyId = 2,
                            Notes = "Video Games",
                            Title = "Game"
                        },
                        new
                        {
                            ProductPropertyId = 3,
                            Notes = "Item can be consumed",
                            Title = "Consumable"
                        },
                        new
                        {
                            ProductPropertyId = 4,
                            Notes = "Toy Figure",
                            Title = "Toy"
                        },
                        new
                        {
                            ProductPropertyId = 5,
                            Notes = "Item can be used",
                            Title = "Utility"
                        });
                });

            modelBuilder.Entity("ProductProductProperty", b =>
                {
                    b.Property<int>("ProductPropertiesProductPropertyId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductPropertiesProductPropertyId", "ProductsProductId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("ProductProductProperty", "prod");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OrderApplicationServer.Web.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OrderApplicationServer.Web.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderApplicationServer.Web.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OrderApplicationServer.Web.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderApplicationServer.Web.Data.Models.Order", b =>
                {
                    b.HasOne("OrderApplicationServer.Web.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderApplicationServer.Web.Data.Models.OrderPosition", b =>
                {
                    b.HasOne("OrderApplicationServer.Web.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductProductProperty", b =>
                {
                    b.HasOne("OrderApplicationServer.Web.Data.Models.ProductProperty", null)
                        .WithMany()
                        .HasForeignKey("ProductPropertiesProductPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderApplicationServer.Web.Data.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
