@page "/products"
@using OrderApplicationServer.Web.Data.Models
@using OrderApplicationServer.Web.Data.ViewModels
@using OrderApplicationServer.Web.Interfaces
@inject NavigationManager NavManager
@inject IUnitOfWork _uow
@inject IStringLocalizer<ProductIndex> Localizer

<PageTitle>@Localizer["MainpageTitle"]</PageTitle>

<AuthorizeView>
    <Authorizing>
        <p><em>Authorizing...</em></p>
    </Authorizing>
<Authorized>

@if(_products is null)
{
    <p><em>Loading...</em></p>
}
else
{
            <Select OnValidSubmit="SetSelectedSelectProduct" T="int" items=@_products.Select(o => new SelectVM<int> {
            Id = o.ProductId,
            DisplayMember = o.Title
        })></Select>

        <label>@_tempSelectProduct</label>

    <div class="container">
        <div class="row justify-content-md-left">
        <h3>@Localizer["MainpageTitle"]</h3>
        <button class="btn btn-primary oi oi-plus" @onclick="CreateProduct"/>
        <hr/>

            @foreach(var product in _products)
            {
                @if(product.ProductId == _selectedProduct)
                {
                    <ProductCard OnValidSubmit="LoadPropertiesFromProdId" isSelected="true" product=product buttonText="@Localizer["ButtonText"]"/>
                }
                else
                {
                    <ProductCard OnValidSubmit="LoadPropertiesFromProdId" isSelected="false" product=product buttonText="@Localizer["ButtonText"]"/>
                }
            }
        </div>
    </div>

    <!-- Current and Available Product Properties -->
    @if(_productWithProps is not null)
    {
        <hr />
        <br />
        <div class="container">
            <div class="row">
                <div class="col-sm">
                <!-- Current Product Properties -->
                <h3>@Localizer["MainpageTitle"]</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>@Localizer["TableTitle"]</th>
                            <th>@Localizer["TableNote"]</th>
                            <th>@Localizer["TableControls"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var item in _productWithProps.ProductProperties)
                        {
                            <tr>
                                <td>@item.Title</td>
                                <td>@item.Notes</td>
                                <td><button class="btn btn-danger oi oi-x" @onclick="() => RemovePropFromProduct(item.ProductPropertyId)"/></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <divs class="col-sm">
                <!-- Available Product Properties -->
                <h3>@Localizer["AvailableProdProperties"]</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>@Localizer["TableTitle"]</th>
                            <th>@Localizer["TableNote"]</th>
                            <th>@Localizer["TableControls"]</th>
                        </tr>
                    </thead>
                    <tbody>
                            @foreach(var item in _availableProdProperties)
                            {
                                @if (!_productWithProps.ProductProperties.Select(p => p.ProductPropertyId).Contains(item.ProductPropertyId))
                                {
                                    <tr>
                                        <td>@item.Title</td>
                                        <td>@item.Notes</td>
                                        <td><button class="btn btn-success oi oi-plus" @onclick="() => AddPropToProduct(item.ProductPropertyId)"></button></td>
                                    </tr>   
                                }
                            }
                    </tbody>
                </table>
            </divs>
            </div>
        </div>


    }
}

</Authorized>
    <NotAuthorized>
        Access Denied
    </NotAuthorized>
</AuthorizeView>


@code {
    private Product[]? _products;
    private Product? _productWithProps;
    private ProductProperty[]? _availableProdProperties;
    private int _selectedProduct;
    private int _tempSelectProduct;

    protected async override Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task SetSelectedSelectProduct(int id)
    {
        _tempSelectProduct = id;
    }

    private async Task LoadProducts()
    {
        _products = (await _uow.IProductRepo.GetAll()).ToArray();
    }

    private async Task LoadPropertiesFromProdId(int productId)
    {
        _selectedProduct = productId;
        await LoadAllProperties();
        _productWithProps = await _uow.IProductRepo.GetProduct(productId);
    }

    private async Task LoadAllProperties()
    {
        _availableProdProperties = (await _uow.IProductRepo.GetAllProductProperties()).ToArray();
    }

    private async Task AddPropToProduct(int propertyId)
    {
        var modelToAdd = _availableProdProperties.FirstOrDefault(p => p.ProductPropertyId == propertyId);
        int productId = _productWithProps.ProductId;

        await _uow.IProductRepo.AddPropertyToProduct(modelToAdd, productId);
        await _uow.SaveChangesAsync();

        await LoadProducts();
        await LoadPropertiesFromProdId(productId);
    }

    private async Task RemovePropFromProduct(int propertyId)
    {
        // Get Property to Remove
        var modelToRemove = _availableProdProperties.FirstOrDefault(p => p.ProductPropertyId == propertyId);

        // Gets ProductId from currently selected product
        int productId = _productWithProps.ProductId;

        await _uow.IProductRepo.RemovePropertyFromProduct(modelToRemove, productId);
        await _uow.SaveChangesAsync();

        await LoadProducts();
        await LoadPropertiesFromProdId(productId);
    }

    private async Task CreateProduct()
    {
        NavManager.NavigateTo("createproduct");
    }
}
